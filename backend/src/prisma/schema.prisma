// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  password       String
  username       String    @unique
  websocketId    String?   // The ID of the websocket, nullable
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  chats          Chat[]    @relation("UserChats")
  blockedUsers   BlockedUser[] @relation("BlockingUsers")
  blockedByUsers BlockedUser[] @relation("BlockedByUsers")
  sentMessages   Message[] @relation("SentMessages")
  sentInvitations    GameInvitation[] @relation("SentInvitations")
  receivedInvitations GameInvitation[] @relation("ReceivedInvitations")
}

model Message {
  id            Int      @id @default(autoincrement())
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  sender        User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId      Int
  chat          Chat     @relation("ChatMessages", fields: [chatId], references: [id])
  chatId        Int
}

model Chat {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  messages      Message[] @relation("ChatMessages")
  participants  User[]    @relation("UserChats")
}

model GameInvitation {
  id            Int      @id @default(autoincrement())
  inviter       User     @relation("SentInvitations", fields: [inviterId], references: [id])
  inviterId     Int
  invitee       User     @relation("ReceivedInvitations", fields: [inviteeId], references: [id])
  inviteeId     Int
  status        String   // "pending", "accepted", "rejected"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model BlockedUser {
  id            Int      @id @default(autoincrement())
  blocker       User     @relation("BlockingUsers", fields: [blockerId], references: [id])
  blockerId     Int
  blocked       User     @relation("BlockedByUsers", fields: [blockedId], references: [id])
  blockedId     Int
}
