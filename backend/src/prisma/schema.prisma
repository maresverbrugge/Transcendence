// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  username          String    @unique
  avatar            Bytes?
  websocketId       String?   // The ID of the websocket, nullable
  
  // Relations
  chatsOwned        Chat[]
  chatMembers       ChatMember[]
  blockedUsers      BlockedUser[] @relation("blockedUsers")
  blockedByUsers    BlockedUser[] @relation("blockedByUsers")
}

model Chat {
  id                Int           @id @default(autoincrement())
  password          String?       // Optional password field
  
  // Relations
  owner_id          Int
  owner             User          @relation(fields: [owner_id], references: [id])
  messages          Message[]
  members           ChatMember[]
}

model Message {
  id                Int           @id @default(autoincrement())
  content           String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relations
  chatId            Int
  chat              Chat          @relation(fields: [chatId], references: [id])
}

model ChatMember     {
  id                Int           @id @default(autoincrement())
  isAdmin           Boolean       @default(false)
  isMuted           Boolean       @default(false)
  isBanned          Boolean       @default(false)

  // Relations
  member_id         Int
  member            User          @relation(fields: [member_id], references: [id])
  chat_id           Int
  chat              Chat          @relation(fields: [chat_id], references: [id])
}

model BlockedUser {
  id                Int           @id @default(autoincrement())
  blocker           User          @relation("blockedUsers", fields: [blockerId], references: [id])
  blockerId         Int
  blocked           User          @relation("blockedByUsers", fields: [blockedId], references: [id])
  blockedId         Int
}
