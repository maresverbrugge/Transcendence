// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int           @id @default(autoincrement())
  username          String        @unique
  // intraUsername     String
  // avatar            Bytes?
  // Enabled2FA        Boolean
  // websocketId       String?       // The ID of the websocket, nullable
  // status            Status        // ONLINE | OFFLINE | IN_GAME | AFK
  
  // player1Matches    Match[]       @relation("Player1Matches")
  // player2Matches    Match[]       @relation("Player2Matches")
  // Statistics        Statistics?
  // channelsOwned     Channel[]
  // channelMembers    ChannelMember[]
  // blockedUsers      BlockedUser[] @relation("blockedUsers")
  // blockedByUsers    BlockedUser[] @relation("blockedByUsers")
}

enum Status {
  ONLINE
  OFFLINE
  IN_GAME
  AFK
}

model Match {
  matchId           Int           @id @default(autoincrement())
  status            String        @default("pending") // "pending", "accepted", "rejected"
  scorePlayer1      Int           @default(0)
  scorePlayer2      Int           @default(0)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  player1Id         Int
  // player1           User          @relation("Player1Matches", fields: [player1Id], references: [id])
  player2Id         Int?
  // player2           User?         @relation("Player2Matches", fields: [player2Id], references: [id])
}

model Statistics {
  id                Int           @id @default(autoincrement())
  matchesPlayed     Int           @default(0)
  wins              Int           @default(0)
  losses            Int           @default(0)
  totalScores       Int           @default(0)
  rank              Int           @default(0)
  //level             Int           @default(0)
  //achievements      Achievements?

  userId            Int           @unique
  // user              User          @relation(fields: [userId], references: [id])
}

model Channel {
  id                Int           @id @default(autoincrement())
  password          String?       // Optional password field
  
  ownerId          Int
  // owner             User          @relation(fields: [ownerId], references: [id])
  // messages          Message[]
  members           ChannelMember[]
}

model Message {
  id                Int           @id @default(autoincrement())
  content           String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  senderId            Int
  
  // channelId         Int
  // channel           Channel       @relation(fields: [channelId], references: [id])
}

model ChannelMember {
  id                Int           @id @default(autoincrement())
  isAdmin           Boolean       @default(false)
  isMuted           Boolean       @default(false)
  isBanned          Boolean       @default(false)

  memberId         Int
  // member            User          @relation(fields: [memberId], references: [id])
  channelId        Int
  channel           Channel       @relation(fields: [channelId], references: [id])
}

model BlockedUser {
  id                Int           @id @default(autoincrement())
  // blocker           User          @relation("blockedUsers", fields: [blockerId], references: [id])
  blockerId         Int
  // blocked           User          @relation("blockedByUsers", fields: [blockedId], references: [id])
  blockedId         Int
}
