// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql"
  url      = env("DATABASE_URL")
}

enum PlayerStatus {
  ONLINE
  OFFLINE
  IN_GAME
  AFK
}

enum MatchStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model User {
  id                Int           @id @default(autoincrement())
  username          String        @unique
  intraUsername     String
  avatar            Bytes?
  Enabled2FA        Boolean
  websocketId       String?       // The ID of the websocket, nullable
  status            PlayerStatus  // ONLINE | OFFLINE | IN_GAME | AFK
  
  matchHistory      Match[]
  statistics        Statistics?
  channelsOwned     Channel[]
  channelMembers    ChannelMember[]
  blockedUsers      BlockedUser[] @relation("blockedUsers")
  blockedByUsers    BlockedUser[] @relation("blockedByUsers")
}

model Match {
  matchId           Int           @id @default(autoincrement())
  status            MatchStatus   @default(PENDING) // PENDING | ACCEPTED | DECLINED
  scorePlayer1      Int           @default(0)
  scorePlayer2      Int           @default(0)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  players           User[]
}

model Statistics {
  id                Int           @id @default(autoincrement())
  matchesPlayed     Int           @default(0)
  wins              Int           @default(0)
  losses            Int           @default(0)
  totalScores       Int           @default(0)
  rank              Int           @default(0)
  //level             Int           @default(0)
  //achievements      Achievements?

  userId            Int           @unique
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Channel {
  id                Int           @id @default(autoincrement())
  password          String?       // Optional password field
  
  ownerId           Int
  owner             User          @relation(fields: [ownerId], references: [id], onDelete: Cascade) // when user is deleted, channel should not be deleted but a new admin should be assigned
  messages          Message[]
  members           ChannelMember[]
}

model Message {
  id                Int           @id @default(autoincrement())
  content           String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  channelId         Int
  channel           Channel       @relation(fields: [channelId], references: [id], onDelete: Cascade)
}

model ChannelMember {
  id                Int           @id @default(autoincrement())
  isAdmin           Boolean       @default(false)
  isMuted           Boolean       @default(false)
  isBanned          Boolean       @default(false)

  userId            Int
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  channelId         Int
  channel           Channel       @relation(fields: [channelId], references: [id], onDelete: Cascade)
}

model BlockedUser {
  id                Int           @id @default(autoincrement())

  blockerId         Int
  blocker           User          @relation("blockedUsers", fields: [blockerId], references: [id], onDelete: Cascade)
  blockedId         Int
  blocked           User          @relation("blockedByUsers", fields: [blockedId], references: [id], onDelete: Cascade)
}
